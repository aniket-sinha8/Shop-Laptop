{"version":3,"sources":["Components/CartItem.js","Components/BuyPage.js","Components/Cart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CartItem","product","addInCart","Card","className","CardImg","top","height","width","src","mediumImage","CardBody","CardTitle","productName","CardText","productPrice","Button","color","onClick","BuyPage","useState","setProduct","fetchPhotos","a","Axios","get","data","photos","allProduct","map","photo","medium","tinyImage","tiny","random","word","commerce","price","id","uuid","Container","fluid","style","fontSize","Row","Col","md","key","Cart","cartItem","removeItem","buyNow","amount","forEach","item","parseFloat","ListGroup","ListGroupItem","length","CardHeader","CardFooter","App","setCartItem","position","findIndex","array","toast","type","filter","singleItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.20121b6f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nconst CartItem = ({product, addInCart}) => {\r\n    return (\r\n        <Card className=\"mt-2 mb-1\">\r\n            <CardImg\r\n                top\r\n                height=\"250\"\r\n                width=\"100%\"\r\n                src={product.mediumImage}\r\n            />\r\n            <CardBody className=\"text-center\">\r\n            <CardTitle>{product.productName}</CardTitle>\r\n            <CardText className=\"secondary\">Price: RS {product.productPrice}</CardText>\r\n            <Button\r\n                color=\"success\"\r\n                onClick={() => addInCart(product)}\r\n            >Buy Now</Button>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CartItem;","import React, {useState, useEffect} from 'react';\r\nimport Axios  from 'axios';\r\nimport CartItem from './CartItem';\r\nimport {random, commerce} from 'faker';\r\nimport {Container, Col, Row} from 'reactstrap';\r\n\r\nconst apiKey = \"INSERT_YOUR_KEY_HERE\";\r\n\r\nconst url = \"https://api.pexels.com/v1/search?query=laptop&per_page=6&page=1\";\r\nconst localurl = \"https://jsonware.com/json/3631f2ed0b38f18d32387d6c5c92c665.json\";\r\nconst BuyPage = ({addInCart}) => {\r\n    const [product, setProduct] = useState([])\r\n\r\n    // const fetchPhotos = async () => {\r\n    //     const response = await Axios.get(url, {\r\n    //         header: {\r\n    //             Authorization: apiKey\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    const fetchPhotos = async () => {\r\n        const {data} = await Axios.get(localurl); \r\n\r\n\r\n        const {photos} = data;\r\n\r\n        const allProduct = photos.map(photo => ({\r\n            mediumImage: photo.src.medium,\r\n            tinyImage: photo.src.tiny,\r\n            productName: random.word(),\r\n            productPrice: commerce.price(),\r\n            id: random.uuid()\r\n        }))\r\n\r\n    setProduct(allProduct)\r\n    };\r\n\r\n    useState(() => {\r\n       fetchPhotos(); \r\n    }, []);\r\n    \r\n\r\n    return (\r\n        <Container fluid>\r\n            <h1 className=\"text-success text-center\" style={{fontSize: \"80px\"}}>\r\n                Buy your Digital Buddy\r\n            </h1>\r\n            <Row>\r\n                {product.map(product => (\r\n                    <Col md={4} key={product.id}>\r\n                        <CartItem product={product} addInCart={addInCart} />\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n        </Container>\r\n    )\r\n    \r\n\r\n}\r\n\r\nexport default BuyPage;","import React from \"react\";\r\nimport {\r\n  Container,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button,\r\n  CardHeader,\r\n  CardBody,\r\n  Card,\r\n  CardFooter,\r\n  Col,\r\n  Row\r\n} from \"reactstrap\";\r\nimport \"./Cart.css\"\r\n\r\nconst Cart = ({ cartItem, removeItem, buyNow }) => {\r\n  let amount = 0;\r\n\r\n  cartItem.forEach(item => {\r\n    amount = parseFloat(amount) + parseFloat(item.productPrice);\r\n  });\r\n\r\n  return (\r\n    <Container fluid>\r\n      <h1 className=\"text-info text-center\">Your Cart</h1>\r\n      <ListGroup>\r\n        {cartItem.map(item => (\r\n          <ListGroupItem key={item.id}>\r\n            <Row>\r\n              <Col>\r\n                <img height={80} src={item.mediumImage} />\r\n              </Col>\r\n              <Col className=\"text-center\">\r\n                <div className=\"text-primary\">{item.productName}</div>\r\n                <p>Price :- {item.productPrice}</p>\r\n                <Button color=\"danger\" onClick={() => removeItem(item)}>\r\n                  Remove\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </ListGroupItem>\r\n        ))}\r\n      </ListGroup>\r\n      {/* If everything is empty */}\r\n      {cartItem.length >= 1 ? (\r\n        <Card className=\"text-center mt-3\">\r\n          <CardHeader>Grand Total</CardHeader>\r\n          <CardBody>\r\n            Your amount for {cartItem.length} product is Rs.{amount}\r\n          </CardBody>\r\n          <CardFooter>\r\n            <Button color=\"success\" onClick={buyNow}>\r\n              Complete your order!\r\n            </Button>\r\n          </CardFooter>\r\n        </Card>\r\n      ) : (\r\n        <h2 className=\"text-warning text-center italics\"><i>Cart is empty</i></h2>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nimport { Container, Row, Col } from \"reactstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport BuyPage from \"./Components/BuyPage\";\nimport Cart from \"./Components/Cart\";\n\nfunction App() {\n  const [cartItem, setCartItem] = useState([]);\n\n  const addInCart = item => {\n    const isAlreadyAdded = cartItem.findIndex(function(array) {\n      return array.id === item.id;\n    });\n\n    if (isAlreadyAdded !== -1) {\n      toast(\"Already added in Cart\", {\n        type: \"error\"\n      });\n      return;\n    }\n\n    setCartItem([...cartItem, item]);\n  };\n\n  const buyNow = () => {\n    setCartItem([]);\n\n    toast(\"Purchase Complete\", {\n      type: \"success\"\n    });\n  };\n\n  const removeItem = item => {\n    setCartItem(cartItem.filter(singleItem => singleItem.id !== item.id));\n  };\n\n  return (\n    <Container fluid>\n      <ToastContainer position=\"bottom-right\"/>\n      <Row>\n        <Col md=\"8\">\n          <BuyPage addInCart={addInCart} />\n        </Col>\n        <Col md=\"4\">\n          <Cart cartItem={cartItem} removeItem={removeItem} buyNow={buyNow} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}